// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	model "ScheduleJobs/model"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AfterCreate provides a mock function with given fields: slotBody
func (_m *Repository) AfterCreate(slotBody model.User_job_slot) error {
	ret := _m.Called(slotBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User_job_slot) error); ok {
		r0 = rf(slotBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeforeCreate provides a mock function with given fields: slotBody, timeArr
func (_m *Repository) BeforeCreate(slotBody model.SlotBody, timeArr []time.Time) ([]model.Slot, error) {
	ret := _m.Called(slotBody, timeArr)

	var r0 []model.Slot
	var r1 error
	if rf, ok := ret.Get(0).(func(model.SlotBody, []time.Time) ([]model.Slot, error)); ok {
		return rf(slotBody, timeArr)
	}
	if rf, ok := ret.Get(0).(func(model.SlotBody, []time.Time) []model.Slot); ok {
		r0 = rf(slotBody, timeArr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Slot)
		}
	}

	if rf, ok := ret.Get(1).(func(model.SlotBody, []time.Time) error); ok {
		r1 = rf(slotBody, timeArr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: slot
func (_m *Repository) Create(slot model.SlotBody) (model.Slot, error) {
	ret := _m.Called(slot)

	var r0 model.Slot
	var r1 error
	if rf, ok := ret.Get(0).(func(model.SlotBody) (model.Slot, error)); ok {
		return rf(slot)
	}
	if rf, ok := ret.Get(0).(func(model.SlotBody) model.Slot); ok {
		r0 = rf(slot)
	} else {
		r0 = ret.Get(0).(model.Slot)
	}

	if rf, ok := ret.Get(1).(func(model.SlotBody) error); ok {
		r1 = rf(slot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSlot provides a mock function with given fields: _a0, userJobSlot
func (_m *Repository) CreateSlot(_a0 []model.Slot, userJobSlot model.User_job_slot) (bool, error) {
	ret := _m.Called(_a0, userJobSlot)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]model.Slot, model.User_job_slot) (bool, error)); ok {
		return rf(_a0, userJobSlot)
	}
	if rf, ok := ret.Get(0).(func([]model.Slot, model.User_job_slot) bool); ok {
		r0 = rf(_a0, userJobSlot)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]model.Slot, model.User_job_slot) error); ok {
		r1 = rf(_a0, userJobSlot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: jobSlots
func (_m *Repository) FindAll(jobSlots []model.User_job_slot) ([]model.Slot, error) {
	ret := _m.Called(jobSlots)

	var r0 []model.Slot
	var r1 error
	if rf, ok := ret.Get(0).(func([]model.User_job_slot) ([]model.Slot, error)); ok {
		return rf(jobSlots)
	}
	if rf, ok := ret.Get(0).(func([]model.User_job_slot) []model.Slot); ok {
		r0 = rf(jobSlots)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Slot)
		}
	}

	if rf, ok := ret.Get(1).(func([]model.User_job_slot) error); ok {
		r1 = rf(jobSlots)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllCurrentSlots provides a mock function with given fields: userID
func (_m *Repository) FindAllCurrentSlots(userID int) ([]model.Slot, error) {
	ret := _m.Called(userID)

	var r0 []model.Slot
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.Slot, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []model.Slot); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Slot)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSlot provides a mock function with given fields: slot
func (_m *Repository) FindSlot(slot model.Slot) (model.Slot, bool) {
	ret := _m.Called(slot)

	var r0 model.Slot
	var r1 bool
	if rf, ok := ret.Get(0).(func(model.Slot) (model.Slot, bool)); ok {
		return rf(slot)
	}
	if rf, ok := ret.Get(0).(func(model.Slot) model.Slot); ok {
		r0 = rf(slot)
	} else {
		r0 = ret.Get(0).(model.Slot)
	}

	if rf, ok := ret.Get(1).(func(model.Slot) bool); ok {
		r1 = rf(slot)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
