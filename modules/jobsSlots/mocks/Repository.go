// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	model "ScheduleJobs/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: user_job_slot
func (_m *Repository) Create(user_job_slot model.User_job_slot) (model.User_job_slot, error) {
	ret := _m.Called(user_job_slot)

	var r0 model.User_job_slot
	var r1 error
	if rf, ok := ret.Get(0).(func(model.User_job_slot) (model.User_job_slot, error)); ok {
		return rf(user_job_slot)
	}
	if rf, ok := ret.Get(0).(func(model.User_job_slot) model.User_job_slot); ok {
		r0 = rf(user_job_slot)
	} else {
		r0 = ret.Get(0).(model.User_job_slot)
	}

	if rf, ok := ret.Get(1).(func(model.User_job_slot) error); ok {
		r1 = rf(user_job_slot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: user
func (_m *Repository) FindAll(user int) ([]model.User_job_slot, error) {
	ret := _m.Called(user)

	var r0 []model.User_job_slot
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.User_job_slot, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(int) []model.User_job_slot); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User_job_slot)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
